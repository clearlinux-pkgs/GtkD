From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mike Wey <mike@mikewey.eu>
Date: Tue, 29 Sep 2020 20:01:40 +0200
Subject: [PATCH] Fix? deprecation warnings with dmd 2.094

---
 generated/gtkd/gtkd/Loader.d | 124 +++++++++++++++++------------------
 src/gtkd/Loader.d            | 124 +++++++++++++++++------------------
 2 files changed, 124 insertions(+), 124 deletions(-)

diff --git a/generated/gtkd/gtkd/Loader.d b/generated/gtkd/gtkd/Loader.d
index d13da9e..8ac574f 100644
--- a/generated/gtkd/gtkd/Loader.d
+++ b/generated/gtkd/gtkd/Loader.d
@@ -34,19 +34,6 @@ public struct Linker
 		throw new Error("The function you are calling is not pressent in your version of GTK+.");
 	}
 
-	/*
-	 * Links the provided symbol
-	 * Params:
-	 *     funct     = The function we are linking
-	 *     symbol    = The name of the symbol to link
-	 *     libraries = One or more libraries to search for the symbol
-	 */
-	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
-	public static void link(T)(ref T funct, string symbol, LIBRARY[] libraries ...)
-	{
-		funct = cast(T)getSymbol(symbol, libraries);
-	}
-
 	/*
 	 * Links the provided symbol
 	 * Params:
@@ -59,25 +46,6 @@ public struct Linker
 		funct = cast(T)getSymbol(symbol, libraries);
 	}
 
-	/*
-	 * Gets a simbol from one of the provided libraries
-	 * Params:
-	 *     symbol    = The name of the symbol to link
-	 *     libraries = One or more libraries to search for the symbol
-	 */
-	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
-	public static void* getSymbol(string symbol, LIBRARY[] libraries ...)
-	{
-		string[] libStr = new string[libraries.length];
-
-		foreach (i, library; libraries )
-		{
-			libStr[i] = importLibs[library];
-		}
-
-		return getSymbol(symbol, libStr);
-	}
-
 	/*
 	 * Gets a simbol from one of the provided libraries
 	 * Params:
@@ -127,15 +95,6 @@ public struct Linker
 		loadedLibraries[library] = handle;
 	}
 
-	/*
-	 * Unload a library
-	 */
-	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
-	public static void unloadLibrary(LIBRARY library)
-	{
-		unloadLibrary( importLibs[library] );
-	}
-
 	/*
 	 * Unload a library
 	 */
@@ -184,16 +143,6 @@ public struct Linker
 		}
 	}
 
-	/**
-	 * Checks if a library is loaded.
-	 * Returns: true is the library was loaded sucsessfully.
-	 */
-	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
-	public static bool isLoaded(LIBRARY library)
-	{
-		return isLoaded(importLibs[library]);
-	}
-
 	/**
 	 * Checks if a library is loaded.
 	 * Returns: true is the library was loaded sucsessfully.
@@ -212,17 +161,6 @@ public struct Linker
 		return isLoaded(libraries[0]);
 	}
 
-	/**
-	 * Gets all the failed loads for a specific library.
-	 * returns: An array of the names hat failed to load for a specific library
-	 *          or null if none was found
-	 */
-	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
-	public static string[] getLoadFailures(LIBRARY library)
-	{
-		return getLoadFailures(importLibs[library]);
-	}
-
 	/**
 	 * Gets all the failed loads for a specific library.
 	 * returns: An array of the names hat failed to load for a specific library
@@ -268,6 +206,68 @@ public struct Linker
 		foreach ( library; loadedLibraries.keys )
 			unloadLibrary(library);
 	}
+
+		/*
+	 * Links the provided symbol
+	 * Params:
+	 *     funct     = The function we are linking
+	 *     symbol    = The name of the symbol to link
+	 *     libraries = One or more libraries to search for the symbol
+	 */
+	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
+	public static void link(T)(ref T funct, string symbol, LIBRARY[] libraries ...)
+	{
+		funct = cast(T)getSymbol(symbol, libraries);
+	}
+
+	/*
+	 * Gets a simbol from one of the provided libraries
+	 * Params:
+	 *     symbol    = The name of the symbol to link
+	 *     libraries = One or more libraries to search for the symbol
+	 */
+	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
+	public static void* getSymbol(string symbol, LIBRARY[] libraries ...)
+	{
+		string[] libStr = new string[libraries.length];
+
+		foreach (i, library; libraries )
+		{
+			libStr[i] = importLibs[library];
+		}
+
+		return getSymbol(symbol, libStr);
+	}
+
+	/*
+	 * Unload a library
+	 */
+	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
+	public static void unloadLibrary(LIBRARY library)
+	{
+		unloadLibrary( importLibs[library] );
+	}
+
+	/**
+	 * Checks if a library is loaded.
+	 * Returns: true is the library was loaded sucsessfully.
+	 */
+	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
+	public static bool isLoaded(LIBRARY library)
+	{
+		return isLoaded(importLibs[library]);
+	}
+
+	/**
+	 * Gets all the failed loads for a specific library.
+	 * returns: An array of the names hat failed to load for a specific library
+	 *          or null if none was found
+	 */
+	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
+	public static string[] getLoadFailures(LIBRARY library)
+	{
+		return getLoadFailures(importLibs[library]);
+	}
 }
 
 // Platform specific implementation below.
diff --git a/src/gtkd/Loader.d b/src/gtkd/Loader.d
index d13da9e..8ac574f 100644
--- a/src/gtkd/Loader.d
+++ b/src/gtkd/Loader.d
@@ -34,19 +34,6 @@ public struct Linker
 		throw new Error("The function you are calling is not pressent in your version of GTK+.");
 	}
 
-	/*
-	 * Links the provided symbol
-	 * Params:
-	 *     funct     = The function we are linking
-	 *     symbol    = The name of the symbol to link
-	 *     libraries = One or more libraries to search for the symbol
-	 */
-	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
-	public static void link(T)(ref T funct, string symbol, LIBRARY[] libraries ...)
-	{
-		funct = cast(T)getSymbol(symbol, libraries);
-	}
-
 	/*
 	 * Links the provided symbol
 	 * Params:
@@ -59,25 +46,6 @@ public struct Linker
 		funct = cast(T)getSymbol(symbol, libraries);
 	}
 
-	/*
-	 * Gets a simbol from one of the provided libraries
-	 * Params:
-	 *     symbol    = The name of the symbol to link
-	 *     libraries = One or more libraries to search for the symbol
-	 */
-	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
-	public static void* getSymbol(string symbol, LIBRARY[] libraries ...)
-	{
-		string[] libStr = new string[libraries.length];
-
-		foreach (i, library; libraries )
-		{
-			libStr[i] = importLibs[library];
-		}
-
-		return getSymbol(symbol, libStr);
-	}
-
 	/*
 	 * Gets a simbol from one of the provided libraries
 	 * Params:
@@ -127,15 +95,6 @@ public struct Linker
 		loadedLibraries[library] = handle;
 	}
 
-	/*
-	 * Unload a library
-	 */
-	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
-	public static void unloadLibrary(LIBRARY library)
-	{
-		unloadLibrary( importLibs[library] );
-	}
-
 	/*
 	 * Unload a library
 	 */
@@ -184,16 +143,6 @@ public struct Linker
 		}
 	}
 
-	/**
-	 * Checks if a library is loaded.
-	 * Returns: true is the library was loaded sucsessfully.
-	 */
-	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
-	public static bool isLoaded(LIBRARY library)
-	{
-		return isLoaded(importLibs[library]);
-	}
-
 	/**
 	 * Checks if a library is loaded.
 	 * Returns: true is the library was loaded sucsessfully.
@@ -212,17 +161,6 @@ public struct Linker
 		return isLoaded(libraries[0]);
 	}
 
-	/**
-	 * Gets all the failed loads for a specific library.
-	 * returns: An array of the names hat failed to load for a specific library
-	 *          or null if none was found
-	 */
-	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
-	public static string[] getLoadFailures(LIBRARY library)
-	{
-		return getLoadFailures(importLibs[library]);
-	}
-
 	/**
 	 * Gets all the failed loads for a specific library.
 	 * returns: An array of the names hat failed to load for a specific library
@@ -268,6 +206,68 @@ public struct Linker
 		foreach ( library; loadedLibraries.keys )
 			unloadLibrary(library);
 	}
+
+		/*
+	 * Links the provided symbol
+	 * Params:
+	 *     funct     = The function we are linking
+	 *     symbol    = The name of the symbol to link
+	 *     libraries = One or more libraries to search for the symbol
+	 */
+	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
+	public static void link(T)(ref T funct, string symbol, LIBRARY[] libraries ...)
+	{
+		funct = cast(T)getSymbol(symbol, libraries);
+	}
+
+	/*
+	 * Gets a simbol from one of the provided libraries
+	 * Params:
+	 *     symbol    = The name of the symbol to link
+	 *     libraries = One or more libraries to search for the symbol
+	 */
+	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
+	public static void* getSymbol(string symbol, LIBRARY[] libraries ...)
+	{
+		string[] libStr = new string[libraries.length];
+
+		foreach (i, library; libraries )
+		{
+			libStr[i] = importLibs[library];
+		}
+
+		return getSymbol(symbol, libStr);
+	}
+
+	/*
+	 * Unload a library
+	 */
+	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
+	public static void unloadLibrary(LIBRARY library)
+	{
+		unloadLibrary( importLibs[library] );
+	}
+
+	/**
+	 * Checks if a library is loaded.
+	 * Returns: true is the library was loaded sucsessfully.
+	 */
+	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
+	public static bool isLoaded(LIBRARY library)
+	{
+		return isLoaded(importLibs[library]);
+	}
+
+	/**
+	 * Gets all the failed loads for a specific library.
+	 * returns: An array of the names hat failed to load for a specific library
+	 *          or null if none was found
+	 */
+	deprecated("Use the LIBRARY_* symbols defined for each package, instead of gtkd.paths.LIBRARY")
+	public static string[] getLoadFailures(LIBRARY library)
+	{
+		return getLoadFailures(importLibs[library]);
+	}
 }
 
 // Platform specific implementation below.
